<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE dmodule>
<dmodule xmlns:dc="http://www.purl.org/dc/elements/1.1/" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.s1000d.org/S1000D_4-2/xml_schema_flat/descript.xsd">
  <identAndStatusSection>
    <dmAddress>
      <dmIdent>
        <dmCode modelIdentCode="S1000DTOOLS" systemDiffCode="A" systemCode="00" subSystemCode="0" subSubSystemCode="0" assyCode="00" disassyCode="00" disassyCodeVariant="A" infoCode="130" infoCodeVariant="A" itemLocationCode="D"/>
        <language languageIsoCode="en" countryIsoCode="CA"/>
        <issueInfo issueNumber="005" inWork="00"/>
      </dmIdent>
      <dmAddressItems>
        <issueDate year="2018" month="06" day="07"/>
        <dmTitle>
          <techName>s1kd-tools</techName>
          <infoName>Usage examples</infoName>
        </dmTitle>
      </dmAddressItems>
    </dmAddress>
    <dmStatus issueType="changed">
      <security securityClassification="01"/>
      <responsiblePartnerCompany>
        <enterpriseName>khzae.net</enterpriseName>
      </responsiblePartnerCompany>
      <originator>
        <enterpriseName>khzae.net</enterpriseName>
      </originator>
      <applic>
        <displayText>
          <simplePara>All</simplePara>
        </displayText>
      </applic>
      <brexDmRef>
        <dmRef>
          <dmRefIdent>
            <dmCode modelIdentCode="S1000DTOOLS" systemDiffCode="A" systemCode="00" subSystemCode="0" subSubSystemCode="0" assyCode="00" disassyCode="00" disassyCodeVariant="A" infoCode="022" infoCodeVariant="A" itemLocationCode="D"/>
          </dmRefIdent>
        </dmRef>
      </brexDmRef>
      <qualityAssurance>
        <unverified/>
      </qualityAssurance>
      <reasonForUpdate id="rfu-0001" updateReasonType="urt02">
        <simplePara>Change 'defaults' and 'dmtypes' to '.defaults' and '.dmtypes'</simplePara>
      </reasonForUpdate>
    </dmStatus>
  </identAndStatusSection>
  <content>
    <description>
      <levelledPara id="par-0001">
        <title>General</title>
        <para>This document provides examples of the usage of the <emphasis>s1kd-tools</emphasis>.</para>
        <para>The sample commands have been written as they would be used on a Linux or other Unix-like system, but should work more-or-less the same on most operating systems. OS-specific commands used in examples (e.g., <verbatimText>mkdir</verbatimText>) may need to be adapted.</para>
      </levelledPara>
      <levelledPara id="par-0002">
        <title>Initial setup</title>
        <para>This first step is to create a folder for the new S1000D project. Example:</para>
        <para>
          <verbatimText verbatimStyle="vs23">$ mkdir myproject
$ cd myproject</verbatimText>
        </para>
        <para>After that, you should create two files: <verbatimText verbatimStyle="vs02">.defaults</verbatimText> and <verbatimText verbatimStyle="vs02">.dmtypes</verbatimText>. These files can be created automatically using the <emphasis>s1kd-defaults</emphasis> tool to initialize the new CSDB:</para>
        <para>
          <verbatimText verbatimStyle="vs23">$ s1kd-defaults -i</verbatimText>
        </para>
        <para>Afterwards, these files can be edited to customize them for your project. More information on the contents of these files is provided below.</para>
        <levelledPara id="par-0003">
          <title><verbatimText verbatimStyle="vs02">.defaults</verbatimText> file</title>
          <para>The <verbatimText verbatimStyle="vs02">.defaults</verbatimText> file is used by all of the s1kd-new* tools. It provides default values for various S1000D metadata. The <verbatimText verbatimStyle="vs02">.defaults</verbatimText> file can be written in either a simple text format or an XML format.</para>
          <para>
            <emphasis emphasisType="em01">Example of simple text format:</emphasis>
          </para>
          <para>
            <verbatimText verbatimStyle="vs23">languageIsoCode            en
countryIsoCode             CA
responsiblePartnerCompany  khzae.net
originator                 khzae.net
brex                       MYPRJ-A-00-00-00-00A-022A-D
techName                   My project</verbatimText>
          </para>
          <para>
            <emphasis emphasisType="em01">Example of XML format:</emphasis>
          </para>
          <para>
            <verbatimText verbatimStyle="vs11">&lt;?xml version="1.0"?&gt;
&lt;defaults&gt;
&lt;default ident="languageIsoCode" value="en"/&gt;
&lt;default ident="countryIsoCode" value="CA"/&gt;
&lt;default ident="responsiblePartnerCompany" value="khzae.net"/&gt;
&lt;default ident="originator" value="khzae.net"/&gt;
&lt;default ident="brex" value="MYPRJ-A-00-00-00-00A-022A-D"/&gt;
&lt;default ident="techName" value="My project"/&gt;
&lt;/defaults&gt;</verbatimText>
          </para>
        </levelledPara>
        <levelledPara id="par-0004">
          <title><verbatimText verbatimStyle="vs02">.dmtypes</verbatimText> file</title>
          <para>The <verbatimText verbatimStyle="vs02">.dmtypes</verbatimText> file is used by the <emphasis>s1kd-newdm</emphasis> tool. It contains a list of information codes and associated info names and schemas to be used when creating new data modules. Like the <verbatimText verbatimStyle="vs02">.defaults</verbatimText> file, it can be written using either the simple text format or XML format.</para>
          <para>
            <emphasis emphasisType="em01">Example of simple text format:</emphasis>
          </para>
          <para>
            <verbatimText verbatimStyle="vs23">009  frontmatter  Table of contents
022  brex         Business rules exchange
040  descript     Description
130  proced       Normal operation</verbatimText>
          </para>
          <para>
            <emphasis emphasisType="em01">Example of XML format:</emphasis>
          </para>
          <para>
            <verbatimText verbatimStyle="vs11">&lt;?xml version="1.0"?&gt;
&lt;dmtypes&gt;
&lt;type infoCode="009" infoName="Table of contents"
schema="frontmatter"/&gt;
&lt;type infoCode="022" infoName="Business rules exchange"
schema="brex"/&gt;
&lt;type infoCode="040" infoName="Description"
schema="descript"/&gt;
&lt;type infoCode="130" infoName="Normal operation"
schema="proced"/&gt;
&lt;/dmtypes&gt;</verbatimText>
          </para>
          <para>The s1kd-newdm tool contains a default set of information code definitions. This can be used to create a default <verbatimText verbatimStyle="vs02">.dmtypes</verbatimText> file by use of the <verbatimText>-.</verbatimText> (simple text format) or <verbatimText>-,</verbatimText> (XML) options:</para>
          <para>
            <verbatimText>$ s1kd-newdm -, &gt; .dmtypes</verbatimText>
          </para>
          <para>The generated <verbatimText verbatimStyle="vs02">.dmtypes</verbatimText> file can then be customized to fit your project.</para>
        </levelledPara>
      </levelledPara>
      <levelledPara id="par-0005">
        <title>Creating the DMRL and populating the CSDB</title>
        <para>The next step is to prepare the DMRL for the project. The DMRL will contain a list of all the CSDB objects initially required by your project, and can be used to automatically populate your CSDB.</para>
        <para>If you do not already have a DMRL, the <emphasis>s1kd-newdml</emphasis> tool can be used to create a new one:</para>
        <para>
          <verbatimText verbatimStyle="vs23">$ s1kd-newdml -# MYPRJ-NCAGE-C-2017-00001</verbatimText>
        </para>
        <para>This would create the file <verbatimText verbatimStyle="vs02">DML-MYPRJ-NCAGE-C-2017-00001_000-01.XML</verbatimText> in your CSDB folder.</para>
        <para>Once the DMRL is prepared, the <emphasis>s1kd-dmrl</emphasis> tool can be used to automatically populate the CSDB based on the CSDB objects listed in the DMRL:</para>
        <para>
          <verbatimText verbatimStyle="vs23">$ s1kd-dmrl DML-MYPRJ-NCAGE-C-2017-00001_000-01.XML</verbatimText>
        </para>
        <para>Information not included in the DMRL entry for a CSDB object is pulled from the <verbatimText verbatimStyle="vs02">.defaults</verbatimText> file (and the <verbatimText verbatimStyle="vs02">.dmtypes</verbatimText> file for data modules).</para>
        <levelledPara id="par-0006">
          <title>Creating CSDB objects on-the-fly</title>
          <para>Data modules and other CSDB objects can also be created in an "on-the-fly" manner, without the use of a DMRL, by invoking the s1kd-new* set of tools directly, as with s1kd-newdml above. For example, to create a new data module:</para>
          <para>
            <verbatimText verbatimStyle="vs23">$ s1kd-newdm -# MYPRJ-A-00-00-00-00A-040A-D</verbatimText>
          </para>
          <para>This would create the file <verbatimText verbatimStyle="vs02">DMC-MYPRJ-A-00-00-00-00A-040A-D_000-01_EN-CA.XML</verbatimText> in your CSDB folder.</para>
          <para>Each of the s1kd-new* tools has various options for setting specific metadata, and information not included as arguments to these commands is pulled from the <verbatimText verbatimStyle="vs02">.defaults</verbatimText> and <verbatimText verbatimStyle="vs02">.dmtypes</verbatimText> files.</para>
        </levelledPara>
      </levelledPara>
      <levelledPara id="par-0007">
        <title>Data module workflow</title>
        <para>Data modules are put through the general S1000D workflow with the <emphasis>s1kd-upissue</emphasis> tool. Whenever a data module will be changed, the s1kd-upissue tool should first be used to indicate the forthcoming change, creating the next inwork issue of the data module.</para>
        <levelledPara id="par-0008">
          <title>Inwork data modules</title>
          <para>When a data module is in the inwork state, the s1kd-upissue tool is called without any additional arguments:</para>
          <para>
            <verbatimText verbatimStyle="vs23">$ s1kd-upissue DMC-MYPRJ-A-00-00-00-00A-040A-D_000-01_EN-CA.XML</verbatimText>
          </para>
          <para>Assuming this data module was just created, it would be incremented from initial inwork issue 000-01 to initial inwork issue 000-02. After upissuing, make the changes. For example:</para>
          <para>
            <emphasis emphasisType="em01"><verbatimText verbatimStyle="vs02">DMC-MYPRJ-A-00-00-00-00A-040A-D_000-01_EN-CA.XML</verbatimText>:</emphasis>
            <verbatimText verbatimStyle="vs11">&lt;content&gt;
&lt;description&gt;
&lt;levelledPara&gt;
&lt;title&gt;General&lt;/title&gt;
&lt;para&gt;This is my project.&lt;/para&gt;
&lt;/levelledPara&gt;
&lt;/description&gt;
&lt;/content&gt;</verbatimText>
          </para>
          <para>
            <emphasis emphasisType="em01"><verbatimText verbatimStyle="vs02">DMC-MYPRJ-A-00-00-00-00A-040A-D_000-02_EN-CA.XML</verbatimText>:</emphasis>
            <verbatimText verbatimStyle="vs11">&lt;content&gt;
&lt;description&gt;
&lt;levelledPara&gt;
&lt;title&gt;General&lt;/title&gt;
&lt;para&gt;This is my project.&lt;/para&gt;
&lt;para&gt;My project is maintained using S1000D.&lt;/para&gt;
&lt;/levelledPara&gt;
&lt;/description&gt;
&lt;/content&gt;</verbatimText>
          </para>
        </levelledPara>
        <levelledPara id="par-0009">
          <title>Making data modules official</title>
          <para>Before a data module can be made official, it must be validated. This means:</para>
          <para>
            <randomList>
              <listItem>
                <para>It is a valid XML file</para>
              </listItem>
              <listItem>
                <para>It is valid according to the relevant S1000D schema</para>
              </listItem>
              <listItem>
                <para>It is valid according to the relevant business rules</para>
              </listItem>
              <listItem>
                <para>Its references to other CSDB objects are valid</para>
              </listItem>
              <listItem>
                <para>The actual narrative (content) is correct</para>
              </listItem>
            </randomList>
          </para>
          <para>The first two points can be verified with the <emphasis>s1kd-validate</emphasis> tool. This tool will indicate any problems with the data module in terms of XML syntax and its correctness regarding its S1000D schema.</para>
          <para>The third point can be verified using the <emphasis>s1kd-brexcheck</emphasis> tool. This tool will indicate any places where a data module violates computable business rules.</para>
          <para>The fourth point can be checked using the <emphasis>s1kd-checkrefs</emphasis> tool. This tool checks the references within a data module and highlights any references which cannot be resolved.</para>
          <para>In contrast to the first four points, which can be verified automatically, the last point is generally not an automatic process, and involves quality assurance testing by a human. That a data module has been first and second QA tested can be indicated with the s1kd-upissue tool:</para>
          <para>
            <verbatimText verbatimStyle="vs23">$ s1kd-upissue -1 tabtop -2 ttandoo ...</verbatimText>
          </para>
          <para>Once the data module is validated, the s1kd-upissue tool is used to make it official with the <verbatimText>-i</verbatimText> option:</para>
          <para>
            <verbatimText verbatimStyle="vs23">$ s1kd-upissue -i DMC-MYPRJ-A-00-00-00-00A-040A-D_000-03_EN-CA.XML</verbatimText>
          </para>
        </levelledPara>
        <levelledPara id="par-0010">
          <title>Changes to official data modules</title>
          <para>When a change must be made to an official data module (for example, as a result of feedback), the s1kd-upissue tool is used again to bring the data module back to the inwork state:</para>
          <para>
            <verbatimText verbatimStyle="vs23">$ s1kd-upissue DMC-MYPRJ-A-00-00-00-00A-040A-D_001-00_EN-CA.XML</verbatimText>
          </para>
          <para>Changes between official issues of a data module are indicated with reasons for update and change marking. For example:</para>
          <para>
            <emphasis emphasisType="em01"><verbatimText verbatimStyle="vs02">DMC-MYPRJ-A-00-00-00-00A-040A-D_001-00_EN-CA.XML</verbatimText>:</emphasis>
            <verbatimText verbatimStyle="vs11">&lt;content&gt;
&lt;description&gt;
&lt;levelledPara&gt;
&lt;title&gt;General&lt;/title&gt;
&lt;para&gt;This is my project.&lt;/para&gt;
&lt;para&gt;My project is maintained using S1000D.&lt;/para&gt;
&lt;/levelledPara&gt;
&lt;/description&gt;
&lt;/content&gt;</verbatimText>
          </para>
          <para>
            <emphasis emphasisType="em01"><verbatimText verbatimStyle="vs02">DMC-MYPRJ-A-00-00-00-00A-040A-D_001-01_EN-CA.XML</verbatimText>:</emphasis>
            <verbatimText verbatimStyle="vs11">&lt;dmStatus issueType="changed"&gt;
&lt;!-- ...... --&gt;
&lt;reasonForUpdate id="rfu-0001"&gt;
&lt;simplePara&gt;Added reference to tools used.&lt;/simplePara&gt;
&lt;/reasonForUpdate&gt;
&lt;/dmStatus&gt;
&lt;!-- ...... --&gt;
&lt;content&gt;
&lt;description&gt;
&lt;levelledPara&gt;
&lt;title&gt;General&lt;/title&gt;
&lt;para&gt;This is my project.&lt;/para&gt;
&lt;para changeType="modify" changeMark="1"
reasonForUpdateRefIds="rfu-0001"&gt;My project is maintained using
S1000D and s1kd-tools.&lt;/para&gt;
&lt;/levelledPara&gt;
&lt;/description&gt;
&lt;/content&gt;</verbatimText>
          </para>
          <para>Reasons for update from the previous official issue are automatically removed when upissuing to the first inwork issue.</para>
        </levelledPara>
        <levelledPara id="par-0011">
          <title>Deleting data modules</title>
          <para>The basic cycle continues until a data module is deleted. "Deleting" a data module is a special case of upissuing:</para>
          <para>
            <verbatimText verbatimStyle="vs23">$ s1kd-upissue -is deleted ...</verbatimText>
          </para>
          <para>The data module is upissued to the next official issue, and it's issue type is set to "<verbatimText verbatimStyle="vs14">deleted</verbatimText>".</para>
          <para>Deleted data modules may be reinstated later in a similar way:</para>
          <para>
            <verbatimText verbatimStyle="vs23">$ s1kd-upissue -is rinstate-status ...</verbatimText>
          </para>
          <para>The data module is once again upissued to the next official issue, and the issue type is set to one of the "<verbatimText verbatimStyle="vs14">rinstate-..."</verbatimText> types.</para>
        </levelledPara>
      </levelledPara>
      <levelledPara id="par-0012">
        <title>Use with other version control systems</title>
        <para>The issue/inwork numbers and S1000D file naming conventions as seen above provide a basic form of version control. In this case, each file represents a single issue of a CSDB object, and multiple files together represent the whole logical object. For example, all of the following files represent different versions of the same object:</para>
        <para>
          <randomList>
            <listItem>
              <para>
                <verbatimText verbatimStyle="vs02">DMC-MYPRJ-A-00-00-00-00A-040A-D_000-01_EN-CA.XML</verbatimText>
              </para>
            </listItem>
            <listItem>
              <para>
                <verbatimText verbatimStyle="vs02">DMC-MYPRJ-A-00-00-00-00A-040A-D_000-02_EN-CA.XML</verbatimText>
              </para>
            </listItem>
            <listItem>
              <para>
                <verbatimText verbatimStyle="vs02">DMC-MYPRJ-A-00-00-00-00A-040A-D_001-00_EN-CA.XML</verbatimText>
              </para>
            </listItem>
          </randomList>
        </para>
        <para>However, if you prefer to use an existing version control system such as git or SVN, it is often more useful for each file to represent a whole object, since these systems typically track changes based on filenames.</para>
        <para>The s1kd-tools support an alternate naming convention for this case. Specifying the -N option to certain tools will omit the issue and inwork numbers from filenames of CSDB objects. Taking the s1kd-newdm tool example from above, but adding the -N option as follows:</para>
        <para>
          <verbatimText verbatimStyle="vs23">$ s1kd-newdm -N# MYPRJ-A-00-00-00-00A-040A-D</verbatimText>
        </para>
        <para>would create the file <verbatimText verbatimStyle="vs02">DMC-MYPRJ-A-00-00-00-00A-040A-D_EN-CA.XML</verbatimText> in your CSDB folder. The s1kd-upissue tool works similarly:</para>
        <para>
          <verbatimText verbatimStyle="vs23">$ s1kd-upissue -Ni DMC-MYPRJ-A-00-00-00-00A-040A-D_EN-CA.XML</verbatimText>
        </para>
        <para>The issue and inwork numbers are updated in the XML metadata, but instead of creating a new file, the original is overwritten. The previous inwork issues are therefore stored as part of the external version control's history, rather than as individual files.</para>
      </levelledPara>
    </description>
  </content>
</dmodule>
