<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE dmodule>
<dmodule xmlns:dc="http://www.purl.org/dc/elements/1.1/" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.s1000d.org/S1000D_4-2/xml_schema_flat/descript.xsd">
  <identAndStatusSection>
    <dmAddress>
      <dmIdent>
        <dmCode modelIdentCode="S1000DTOOLS" systemDiffCode="A" systemCode="00" subSystemCode="0" subSubSystemCode="3" assyCode="00" disassyCode="00" disassyCodeVariant="A" infoCode="040" infoCodeVariant="A" itemLocationCode="D"/>
        <language languageIsoCode="en" countryIsoCode="CA"/>
        <issueInfo issueNumber="024" inWork="00"/>
      </dmIdent>
      <dmAddressItems>
        <issueDate year="2018" month="07" day="31"/>
        <dmTitle>
          <techName>s1kd-instance</techName>
          <infoName>Description</infoName>
        </dmTitle>
      </dmAddressItems>
    </dmAddress>
    <dmStatus issueType="changed">
      <security securityClassification="01"/>
      <responsiblePartnerCompany>
        <enterpriseName>khzae.net</enterpriseName>
      </responsiblePartnerCompany>
      <originator>
        <enterpriseName>khzae.net</enterpriseName>
      </originator>
      <applic>
        <displayText>
          <simplePara>All</simplePara>
        </displayText>
      </applic>
      <brexDmRef>
        <dmRef>
          <dmRefIdent>
            <dmCode modelIdentCode="S1000DTOOLS" systemDiffCode="A" systemCode="00" subSystemCode="0" subSubSystemCode="0" assyCode="00" disassyCode="00" disassyCodeVariant="A" infoCode="022" infoCodeVariant="A" itemLocationCode="D"/>
          </dmRefIdent>
        </dmRef>
      </brexDmRef>
      <qualityAssurance>
        <unverified/>
      </qualityAssurance>
      <reasonForUpdate id="rfu-0001" updateReasonType="urt02" updateHighlight="1">
        <simplePara>Change default behaviour of -Y/-y options and add -W option to restore original behaviour.</simplePara>
      </reasonForUpdate>
      <reasonForUpdate id="rfu-0002" updateReasonType="urt01">
        <simplePara>Clarify that -a and -A operate on inline applicability annotations.</simplePara>
      </reasonForUpdate>
    </dmStatus>
  </identAndStatusSection>
  <content>
    <description>
      <levelledPara>
        <title>General</title>
        <para>The <emphasis>s1kd-instance</emphasis> tool produces an "instance" of an S1000D CSDB object, derived from a "master" (or "source") object. The tool supports multiple methods of instantiating an object:</para>
        <para>
          <randomList>
            <listItem>
              <para>Filtering on user-supplied applicability definitions, so that non-applicable elements and (optionally) unused applicability annotations are removed in the instance. The definitions can be supplied directly or read from a <acronym acronymType="at01"><acronymTerm>PCT</acronymTerm><acronymDefinition id="acr-PCT">Product Cross-reference Table</acronymDefinition></acronym>.</para>
            </listItem>
            <listItem>
              <para>Filtering on skill levels and security classifications.</para>
            </listItem>
            <listItem>
              <para>Using a <acronym acronymType="at01"><acronymTerm>CIR</acronymTerm><acronymDefinition id="acr-CIR">Common Information Repository</acronymDefinition></acronym> to produce a standalone instance from a CIR-dependent master.</para>
            </listItem>
            <listItem>
              <para>Changing various pieces of metadata in the instance.</para>
            </listItem>
          </randomList>
        </para>
        <para>Any combination of these methods can be used when producing an instance.</para>
      </levelledPara>
      <levelledPara>
        <title>Usage</title>
        <para>
          <verbatimText verbatimStyle="vs24">s1kd-instance [options] [&lt;object&gt;...]</verbatimText>
        </para>
      </levelledPara>
      <levelledPara>
        <title>Options</title>
        <para>
          <definitionList>
            <definitionListItem>
              <listItemTerm>-A</listItemTerm>
              <listItemDefinition>
                <para changeType="modify" reasonForUpdateRefIds="rfu-0002">Simplify inline applicability annotations and remove unused ones.</para>
              </listItemDefinition>
            </definitionListItem>
            <definitionListItem>
              <listItemTerm>-a</listItemTerm>
              <listItemDefinition>
                <para changeType="modify" reasonForUpdateRefIds="rfu-0002">Remove unused inline applicability annotations.</para>
              </listItemDefinition>
            </definitionListItem>
            <definitionListItem>
              <listItemTerm>-C &lt;comment&gt;</listItemTerm>
              <listItemDefinition>
                <para>Add an XML comment to an instance. Useful as another way of identifying an object as an instance aside from the source address or extended code, or giving additional information about a particular instance. By default, the comment is inserted at the top of the document, but this can be customized with the -X option.</para>
              </listItemDefinition>
            </definitionListItem>
            <definitionListItem>
              <listItemTerm>-c &lt;code&gt;</listItemTerm>
              <listItemDefinition>
                <para>Specify a new data module code (DMC) or publication module code (PMC) for the instance.</para>
              </listItemDefinition>
            </definitionListItem>
            <definitionListItem>
              <listItemTerm>-E</listItemTerm>
              <listItemDefinition>
                <para>Remove the extension from an instance produced from an already extended object.</para>
              </listItemDefinition>
            </definitionListItem>
            <definitionListItem>
              <listItemTerm>-e &lt;ext&gt;</listItemTerm>
              <listItemDefinition>
                <para>Specify an extension on the data module code (DME) or publication module code (PME) for the instance.</para>
              </listItemDefinition>
            </definitionListItem>
            <definitionListItem>
              <listItemTerm>-F</listItemTerm>
              <listItemDefinition>
                <para>After filtering, "alts" elements containing only one child element will be "flattened" by replacing them with the applicable child element. Alts elements with multiple child elements are left untouched.</para>
              </listItemDefinition>
            </definitionListItem>
            <definitionListItem>
              <listItemTerm>-f</listItemTerm>
              <listItemDefinition>
                <para>Overwrite existing file with same name as the filename generated automatically with -O, if it exists.</para>
              </listItemDefinition>
            </definitionListItem>
            <definitionListItem>
              <listItemTerm>-G &lt;CODE&gt;/&lt;NAME&gt;</listItemTerm>
              <listItemDefinition>
                <para>Similar to the -g option, but instead of the default enterprise code and name, use the values &lt;CODE&gt; and &lt;NAME&gt;, which are separated by a slash (/). To only include a code, specify &lt;CODE&gt; with no slash. To only include a name, specify &lt;NAME&gt; prefixed by a slash.</para>
              </listItemDefinition>
            </definitionListItem>
            <definitionListItem>
              <listItemTerm>-g</listItemTerm>
              <listItemDefinition>
                <para>Set the originator of the instance. When this option is specified, the code "<verbatimText verbatimStyle="vs14">S1KDI</verbatimText>" and the name "<verbatimText verbatimStyle="vs14">s1kd-instance tool</verbatimText>" are used by default to identify that the instance was produced by this tool. A different code and name can be specified with the -G option.</para>
              </listItemDefinition>
            </definitionListItem>
            <definitionListItem>
              <listItemTerm>-I &lt;date&gt;</listItemTerm>
              <listItemDefinition>
                <para>Set the issue date of the instance. By default, the issue date is taken from the source.</para>
              </listItemDefinition>
            </definitionListItem>
            <definitionListItem>
              <listItemTerm>-i &lt;infoName&gt;</listItemTerm>
              <listItemDefinition>
                <para>Give the data module instance a different infoName.</para>
              </listItemDefinition>
            </definitionListItem>
            <definitionListItem>
              <listItemTerm>-K &lt;levels&gt;</listItemTerm>
              <listItemDefinition>
                <para>Filter the object on the specified skill levels. Elements which are marked with skill levels not contained in the string &lt;levels&gt; are removed in the resulting instance.</para>
              </listItemDefinition>
            </definitionListItem>
            <definitionListItem>
              <listItemTerm>-k &lt;level&gt;</listItemTerm>
              <listItemDefinition>
                <para>Set the skill level of the instance.</para>
              </listItemDefinition>
            </definitionListItem>
            <definitionListItem>
              <listItemTerm>-L</listItemTerm>
              <listItemDefinition>
                <para>Source is a list of object filenames to create instances of, rather than an object itself.</para>
              </listItemDefinition>
            </definitionListItem>
            <definitionListItem>
              <listItemTerm>-l &lt;lang&gt;</listItemTerm>
              <listItemDefinition>
                <para>Set the language and country of the instance. For example, to create an instance for US English, lang would be "en-US".</para>
              </listItemDefinition>
            </definitionListItem>
            <definitionListItem>
              <listItemTerm>-m &lt;remarks&gt;</listItemTerm>
              <listItemDefinition>
                <para>Set the remarks for the instance.</para>
              </listItemDefinition>
            </definitionListItem>
            <definitionListItem>
              <listItemTerm>-N</listItemTerm>
              <listItemDefinition>
                <para>Omit issue/inwork numbers from automatically generated filenames.</para>
              </listItemDefinition>
            </definitionListItem>
            <definitionListItem>
              <listItemTerm>-n &lt;iss&gt;</listItemTerm>
              <listItemDefinition>
                <para>Set the issue and inwork numbers of the instance. By default, the issue and inwork number are taken from the source.</para>
              </listItemDefinition>
            </definitionListItem>
            <definitionListItem>
              <listItemTerm>-O &lt;dir&gt;</listItemTerm>
              <listItemDefinition>
                <para>Output instance(s) in dir, automatically naming them based on:</para>
                <para>
                  <randomList>
                    <listItem>
                      <para>the extension specified with -e</para>
                    </listItem>
                    <listItem>
                      <para>the code specified with -c</para>
                    </listItem>
                    <listItem>
                      <para>The issue info specified with -n</para>
                    </listItem>
                    <listItem>
                      <para>the language and country specified with -L</para>
                    </listItem>
                  </randomList>
                </para>
                <para>If any of the above are not specified, the information is copied from the source object.</para>
              </listItemDefinition>
            </definitionListItem>
            <definitionListItem>
              <listItemTerm>-o &lt;file&gt;</listItemTerm>
              <listItemDefinition>
                <para>Output instance to file instead of stdout.</para>
              </listItemDefinition>
            </definitionListItem>
            <definitionListItem>
              <listItemTerm>-P &lt;PCT&gt;</listItemTerm>
              <listItemDefinition>
                <para><acronymTerm internalRefId="acr-PCT">PCT</acronymTerm> file to read product definitions from (-p). If a product is specified but no PCT is given, the tool will attempt to use the ACT reference of each source data module to find the ACT and PCT data modules in the current directory.</para>
              </listItemDefinition>
            </definitionListItem>
            <definitionListItem>
              <listItemTerm>-p &lt;product&gt;</listItemTerm>
              <listItemDefinition>
                <para>The ID or primary key of a product in the the specified <acronymTerm internalRefId="acr-PCT">PCT</acronymTerm> data module (-P) or the PCT data module referenced by the source data module. A primary key is given in the same form as the -s option and should match a unique assign of a product instance, e.g., "<verbatimText>serialno:prodattr=12345</verbatimText>"</para>
              </listItemDefinition>
            </definitionListItem>
            <definitionListItem>
              <listItemTerm>-R &lt;CIR&gt; ...</listItemTerm>
              <listItemDefinition>
                <para>Use a <acronymTerm internalRefId="acr-CIR">CIR</acronymTerm> to resolve external dependencies in the master object, making the instance object standalone. Additional CIRs can be used by specifying the -R option multiple times.</para>
                <para>The following CIRs have some built-in support:</para>
                <para>
                  <randomList>
                    <listItem>
                      <para>Access points</para>
                    </listItem>
                    <listItem>
                      <para>Applicability</para>
                    </listItem>
                    <listItem>
                      <para>Cautions</para>
                    </listItem>
                    <listItem>
                      <para>Circuit breakers</para>
                    </listItem>
                    <listItem>
                      <para>Controls/indicators</para>
                    </listItem>
                    <listItem>
                      <para>Enterprises</para>
                    </listItem>
                    <listItem>
                      <para>Functional items</para>
                    </listItem>
                    <listItem>
                      <para>Illustrated parts data</para>
                    </listItem>
                    <listItem>
                      <para>Parts</para>
                    </listItem>
                    <listItem>
                      <para>Supplies</para>
                    </listItem>
                    <listItem>
                      <para>Tools</para>
                    </listItem>
                    <listItem>
                      <para>Warnings</para>
                    </listItem>
                    <listItem>
                      <para>Zones</para>
                    </listItem>
                  </randomList>
                </para>
                <para>The methods of resolving the dependencies for a <acronymTerm internalRefId="acr-CIR">CIR</acronymTerm> can be changed by specifying a custom XSLT script with the -r option. The built-in XSLT used for the above <acronymTerm internalRefId="acr-CIR">CIR</acronymTerm> data modules can be dumped with the -x option.</para>
              </listItemDefinition>
            </definitionListItem>
            <definitionListItem>
              <listItemTerm>-r &lt;XSL&gt;</listItemTerm>
              <listItemDefinition>
                <para>Use a custom XSLT script to resolve CIR dependencies for the last specified CIR.</para>
              </listItemDefinition>
            </definitionListItem>
            <definitionListItem>
              <listItemTerm>-S</listItemTerm>
              <listItemDefinition>
                <para>Do not include &lt;sourceDmIdent&gt;/&lt;sourcePmIdent&gt;/&lt;repositorySourceDmIdent&gt; in the instance.</para>
              </listItemDefinition>
            </definitionListItem>
            <definitionListItem>
              <listItemTerm>-s &lt;applic&gt;</listItemTerm>
              <listItemDefinition>
                <para>An applicability definition in the form of "<verbatimText>&lt;ident&gt;:&lt;type&gt;=&lt;value&gt;</verbatimText>". Any number of values can be defined by specifying this option multiple times.</para>
              </listItemDefinition>
            </definitionListItem>
            <definitionListItem>
              <listItemTerm>-t &lt;techName&gt;</listItemTerm>
              <listItemDefinition>
                <para>Give the instance a different techName/pmTitle.</para>
              </listItemDefinition>
            </definitionListItem>
            <definitionListItem>
              <listItemTerm>-U &lt;classes&gt;</listItemTerm>
              <listItemDefinition>
                <para>Filter the object on the specified security classes. Elements marked with security classes not contained in the string &lt;classes&gt; are removed in the resulting instance.</para>
              </listItemDefinition>
            </definitionListItem>
            <definitionListItem>
              <listItemTerm>-u &lt;sec&gt;</listItemTerm>
              <listItemDefinition>
                <para>Set the security classification of the instance. An instance may have a lower security classification than the source if classified information is removed for a particular customer.</para>
              </listItemDefinition>
            </definitionListItem>
            <definitionListItem>
              <listItemTerm>-v</listItemTerm>
              <listItemDefinition>
                <para>When -O is used, print the automatically generated file name of the instance.</para>
              </listItemDefinition>
            </definitionListItem>
            <definitionListItem changeType="add" reasonForUpdateRefIds="rfu-0001" changeMark="1">
              <listItemTerm>-W</listItemTerm>
              <listItemDefinition>
                <para>Set the applicability for the whole object, overwriting the current applicability with the user-defined applicability values.</para>
              </listItemDefinition>
            </definitionListItem>
            <definitionListItem>
              <listItemTerm>-w</listItemTerm>
              <listItemDefinition>
                <para>Check the applicability, skill level, and security classification of the whole object against the user-defined applicability, skill levels, and security classifications. If the whole object is not applicable, then no instance is created.</para>
              </listItemDefinition>
            </definitionListItem>
            <definitionListItem>
              <listItemTerm>-X &lt;path&gt;</listItemTerm>
              <listItemDefinition>
                <para>The XPath expression indicating where the comment specified with -C will be inserted. This should be the path to an element where the comment will be inserted as the first child node. By default, this is the top of the document.</para>
              </listItemDefinition>
            </definitionListItem>
            <definitionListItem>
              <listItemTerm>-x &lt;CIR&gt;</listItemTerm>
              <listItemDefinition>
                <para>Dumps the built-in XSLT used to resolve dependencies for &lt;CIR&gt; CIR type to stdout. This can be used as a starting point for a custom XSLT script to be specified with the -r option.</para>
                <para>The following types currently have built-in XSLT and can therefore be used as values for &lt;CIR&gt;:</para>
                <para>
                  <randomList>
                    <listItem>
                      <para>accessPointRepository</para>
                    </listItem>
                    <listItem>
                      <para>applicRepository</para>
                    </listItem>
                    <listItem>
                      <para>cautionRepository</para>
                    </listItem>
                    <listItem>
                      <para>circuitBreakerRepository</para>
                    </listItem>
                    <listItem>
                      <para>controlIndicatorRepository</para>
                    </listItem>
                    <listItem>
                      <para>enterpriseRepository</para>
                    </listItem>
                    <listItem>
                      <para>functionalItemRepository</para>
                    </listItem>
                    <listItem>
                      <para>illustratedPartsCatalog</para>
                    </listItem>
                    <listItem>
                      <para>partRepository</para>
                    </listItem>
                    <listItem>
                      <para>supplyRepository</para>
                    </listItem>
                    <listItem>
                      <para>toolRepository</para>
                    </listItem>
                    <listItem>
                      <para>warningRepository</para>
                    </listItem>
                    <listItem>
                      <para>zoneRepository</para>
                    </listItem>
                  </randomList>
                </para>
              </listItemDefinition>
            </definitionListItem>
            <definitionListItem>
              <listItemTerm>-Y &lt;text&gt;</listItemTerm>
              <listItemDefinition>
                <para changeType="modify" reasonForUpdateRefIds="rfu-0001" changeMark="1">Update the applicability for the whole object using the user-defined applicability values, and using &lt;text&gt; as the new display text.</para>
              </listItemDefinition>
            </definitionListItem>
            <definitionListItem>
              <listItemTerm>-y</listItemTerm>
              <listItemDefinition>
                <para changeType="modify" reasonForUpdateRefIds="rfu-0001" changeMark="1">Update the applicability for the whole object using the user-defined applicability values.</para>
              </listItemDefinition>
            </definitionListItem>
            <definitionListItem>
              <listItemTerm>--version</listItemTerm>
              <listItemDefinition>
                <para>Show version information.</para>
              </listItemDefinition>
            </definitionListItem>
            <definitionListItem>
              <listItemTerm>&lt;object&gt;...</listItemTerm>
              <listItemDefinition>
                <para>Source CSDB objects to instantiate.</para>
              </listItemDefinition>
            </definitionListItem>
          </definitionList>
        </para>
        <levelledPara>
          <title>Identifying the source of an instance</title>
          <para>The resulting data module instances will contain the element &lt;sourceDmIdent&gt;, which will contain the identification elements of the source data modules used to instantiate them. Publication module instances will contain the element &lt;sourcePmIdent&gt; instead.</para>
          <para>Additionally, the data module instance will contain an element &lt;repositorySourceDmIdent&gt; for each CIR specified with the -R option.</para>
          <para>If the -S option is used, neither the &lt;sourceDmIdent&gt;/&lt;sourcePmIdent&gt; elements or &lt;repositorySourceDmIdent&gt; elements are added. This can be useful when this tool is not used to make an "instance" per se, but more generally to make a module based on an existing module.</para>
        </levelledPara>
        <levelledPara>
          <title>Instance module code (-c) vs extension (-e)</title>
          <para>When creating a data module or publication module instance, the instance should have the same data module/publication module code as the master, with an added extension code, the DME/PME. However, in cases where a vendor does not support this extension or possibly when this tool is used to create "instances" which will from that point on be maintained as normal standalone data modules/publication modules, it may be desirable to change the data module/publication module code instead. These two options can be used together as well to give an instance a new DMC/PMC as well an extension.</para>
        </levelledPara>
        <levelledPara>
          <title>Removing/simplifying applicability annotations (-a vs -A)</title>
          <para>By default, filtering on applicability will remove invalid elements from the resulting instance. In some cases, though, it may be desirable to remove redundant applicability annotations on valid elements. The -a and -A options provide two methods of doing this.</para>
          <para>The -a option will remove applicability annotations (applicRefId) from elements which are deemed to be unambiguously valid (their validity does not rely on applicability values left undefined by the user). Unused occurrences of the corresponding applic elements are removed as well.</para>
          <para>The -A option will do the same as the -a option, but will also attempt to simplify unused parts of applicability annotations. It simplifies an annotation by removing &lt;assert&gt; elements determined to be either unambiguously valid or invalid given the user-defined values, and removing unneeded &lt;evaluate&gt; elements when they contain only one remaining &lt;assert&gt;.</para>
          <para>For example, given the following input:</para>
          <para>
            <verbatimText verbatimStyle="vs11">&lt;referencedApplicGroup&gt;
&lt;applic id="app-0001"&gt;
&lt;assert
applicPropertyIdent="version"
applicPropertyType="prodattr"
applicPropertyValues="A"/&gt;
&lt;/applic&gt;
&lt;applic id="app-0002"&gt;
&lt;assert
applicPropertyIdent="version"
applicPropertyType="prodattr"
applicPropertyValues="B"/&gt;
&lt;/applic&gt;
&lt;applic id="app-0003"&gt;
&lt;evaluate andOr="or"&gt;
&lt;evaluate andOr="and"&gt;
&lt;assert
applicPropertyIdent="version"
applicPropertyType="prodattr"
applicPropertyValues="A"/&gt;
&lt;assert
applicPropertyIdent="weather"
applicPropertyType="condition"
applicPropertyValues="normal"/&gt;
&lt;/evaluate&gt;
&lt;evaluate andOr"and"&gt;
&lt;assert
applicPropertyIdent="version"
applicPropertyType="prodattr"
applicPropertyValues="B"/&gt;
&lt;assert
applicPropertyIdent="weather"
applicPropertyType="condition"
applicPropertyValues="icy"/&gt;
&lt;/evaluate&gt;
&lt;/evaluate&gt;
&lt;/applic&gt;
&lt;/referencedApplicGroup&gt;
&lt;!-- snip --&gt;
&lt;para applicRefId="app-0001"&gt;This applies to version A.&lt;/para&gt;
&lt;para applicRefId="app-0002"&gt;This applies to version B.&lt;/para&gt;
&lt;para applicRefId="app-0003"&gt;
This applies to version A if the weather is normal, or version B if
the weather is icy.
&lt;/para&gt;</verbatimText>
          </para>
          <para>If this data is filtered for version A, without specifying a value for the weather, and neither the -a or -A option is used, the following will be the result:</para>
          <para>
            <verbatimText verbatimStyle="vs11">&lt;referencedApplicGroup&gt;
&lt;applic id="app-0001"&gt;
&lt;assert
applicPropertyIdent="version"
applicPropertyType="prodattr"
applicPropertyValues="A"/&gt;
&lt;/applic&gt;
&lt;applic id="app-0002"&gt;
&lt;assert
applicPropertyIdent="version"
applicPropertyType="prodattr"
applicPropertyValues="B"/&gt;
&lt;/applic&gt;
&lt;applic id="app-0003"&gt;
&lt;evaluate andOr="or"&gt;
&lt;evaluate andOr="and"&gt;
&lt;assert
applicPropertyIdent="version"
applicPropertyType="prodattr"
applicPropertyValues="A"/&gt;
&lt;assert
applicPropertyIdent="weather"
applicPropertyType="condition"
applicPropertyValues="normal"/&gt;
&lt;/evaluate&gt;
&lt;evaluate andOr"and"&gt;
&lt;assert
applicPropertyIdent="version"
applicPropertyType="prodattr"
applicPropertyValues="B"/&gt;
&lt;assert
applicPropertyIdent="weather"
applicPropertyType="condition"
applicPropertyValues="icy"/&gt;
&lt;/evaluate&gt;
&lt;/evaluate&gt;
&lt;/applic&gt;
&lt;/referencedApplicGroup&gt;
&lt;!-- snip --&gt;
&lt;para applicRefId="app-0001"&gt;This applies to version A.&lt;/para&gt;
&lt;para applicRefId="app-0003"&gt;
This applies to version A if the weather is normal, or version B if
the weather is icy.
&lt;/para&gt;</verbatimText>
          </para>
          <para>The second paragraph is removed, because it only applies to version B.</para>
          <para>If the -a option is used, the following would be the result:</para>
          <para>
            <verbatimText verbatimStyle="vs11">&lt;referencedApplicGroup&gt;
&lt;applic id="app-0003"&gt;
&lt;evaluate andOr="or"&gt;
&lt;evaluate andOr="and"&gt;
&lt;assert
applicPropertyIdent="version"
applicPropertyType="prodattr"
applicPropertyValues="A"/&gt;
&lt;assert
applicPropertyIdent="weather"
applicPropertyType="condition"
applicPropertyValues="normal"/&gt;
&lt;/evaluate&gt;
&lt;evaluate andOr"and"&gt;
&lt;assert
applicPropertyIdent="version"
applicPropertyType="prodattr"
applicPropertyValues="B"/&gt;
&lt;assert
applicPropertyIdent="weather"
applicPropertyType="condition"
applicPropertyValues="icy"/&gt;
&lt;/evaluate&gt;
&lt;/evaluate&gt;
&lt;/applic&gt;
&lt;/referencedApplicGroup&gt;
&lt;!-- snip --&gt;
&lt;para&gt;This applies to version A.&lt;/para&gt;
&lt;para applicRefId="app-0003"&gt;
This applies to version A if the weather is normal, or version B if
the weather is icy.
&lt;/para&gt;</verbatimText>
          </para>
          <para>The applicability annotation reference for the first paragraph is removed because, given that the version is A, it must be true. The corresponding applicability annotations, which are no longer referenced, are also removed. The applicability on the third paragraph remains, however, because it is only true if the version is A <emphasis>and</emphasis> the weather is normal, and no value has been given for the weather.</para>
          <para>If the -A option is used, the following would be the result:</para>
          <para>
            <verbatimText verbatimStyle="vs11">&lt;referencedApplicGroup&gt;
&lt;applic id="app-0003"&gt;
&lt;assert
applicPropertyIdent="weather"
applicPropertyType="condition"
applicPropertyValues="normal"/&gt;
&lt;/applic&gt;
&lt;/referencedApplicGroup&gt;
&lt;!-- snip --&gt;
&lt;para&gt;This applies to version A.&lt;/para&gt;
&lt;para applicRefId="app-0003"&gt;
This applies to version A if the weather is normal, or version B if
the weather is icy.
&lt;/para&gt;</verbatimText>
          </para>
          <para>The annotation is now simplified to remove resolved assertions. Because the version must be A, any assertions restating this can be removed as redundant, and any portions of the annotation in which the version is <emphasis>not</emphasis> A can be removed as invalid. This leaves only the assertion about the weather.</para>
          <note>
            <notePara>The -A option may change the <emphasis>meaning</emphasis> of certain applicability annotation without changing the <emphasis>display text</emphasis>. Display text is always left untouched, so using this option may cause display text to be technically incorrect. This option is best used when display text will be automatically generated after filtering, such as with the s1kd-aspp tool.</notePara>
          </note>
        </levelledPara>
        <levelledPara changeType="add" reasonForUpdateRefIds="rfu-0001" changeMark="1">
          <title>Applicability of an instance (-W, -Y, -y)</title>
          <para>The applicability of an instance may change as a result of filtering. For example, a source data module which is applicable to two versions of a product may produce two instances which are each only applicable to one version. There are three options which control how the applicability of the whole instance object is updated.</para>
          <para>The -W option will create an applicability annotation for the instance using only the user-defined applicability values. This means, for example, that given the following command:</para>
          <para>
            <verbatimText verbatimStyle="vs23">$ s1kd-instance -s version:prodattr=A -W ...</verbatimText>
          </para>
          <para>The instance would contain the following annotation:</para>
          <para>
            <verbatimText verbatimStyle="vs11">&lt;dmStatus&gt;
&lt;!-- snip --&gt;
&lt;applic&gt;
&lt;assert applicPropertyIdent="version"
applicPropertyType="prodattr" applicPropertyValues="A"/&gt;
&lt;/applic&gt;
&lt;!-- snip --&gt;
&lt;/dmStatus&gt;</verbatimText>
          </para>
          <para>regardless of what the applicability of the source object was.</para>
          <para>The -y option will create an applicability annotation for the instance by combining the user-defined applicability with the applicability of the source object. For example, given the following annotation in the source object:</para>
          <para>
            <verbatimText verbatimStyle="vs11">&lt;dmStatus&gt;
&lt;!-- snip --&gt;
&lt;applic&gt;
&lt;assert applicPropertyIdent="version"
applicPropertyType="prodattr" applicPropertyValues="A"/&gt;
&lt;/applic&gt;
&lt;!-- snip --&gt;
&lt;/dmStatus&gt;</verbatimText>
          </para>
          <para>and the following command:</para>
          <para>
            <verbatimText verbatimStyle="vs23">$ s1kd-instance -s weather:condition=icy -y ...</verbatimText>
          </para>
          <para>The annotation for the instance would be as follows:</para>
          <para>
            <verbatimText verbatimStyle="vs11">&lt;dmStatus&gt;
&lt;!-- snip --&gt;
&lt;applic&gt;
&lt;evaluate andOr="and"&gt;
&lt;assert applicPropertyIdent="version"
applicPropertyType="prodattr" applicPropertyValues="A"/&gt;
&lt;assert applicPropertyIdent="weather"
applicPropertyType="condition" applicPropertyValues="icy"/&gt;
&lt;/evaluate&gt;
&lt;/applic&gt;
&lt;!-- snip --&gt;
&lt;/dmStatus&gt;</verbatimText>
          </para>
          <para>The -Y option by itself works the same as the -y option, but allows custom display text to be set for the annotation. It can also be combined with the -W option to add custom display text to the overwriting annotation:</para>
          <para>
            <verbatimText verbatimStyle="vs23">$ s1kd-instance -s version:prodattr=A -WY "Version A" ...</verbatimText>
          </para>
          <para>
            <verbatimText verbatimStyle="vs11">&lt;dmStatus&gt;
&lt;!-- snip --&gt;
&lt;applic&gt;
&lt;displayText&gt;
&lt;simplePara&gt;Version A&lt;/simplePara&gt;
&lt;/displayText&gt;
&lt;assert applicPropertyIdent="version"
applicPropertyType="prodattr" applicPropertyValues="A"/&gt;
&lt;/applic&gt;
&lt;!-- snip --&gt;
&lt;/dmStatus&gt;</verbatimText>
          </para>
        </levelledPara>
        <levelledPara>
          <title>Filtering for multiple values of a single property</title>
          <para>Though not usually the case, it is possible to create an instance which is filtered on multiple values of the same applicabilty property. Given the following:</para>
          <para>
            <verbatimText verbatimStyle="vs11">&lt;referencedApplicGroup&gt;
&lt;applic id="apA"&gt;
&lt;assert applicPropertyIdent="attr"
applicPropertyType="prodattr"
applicPropertyValues="A"/&gt;
&lt;/applic&gt;
&lt;applic id="apB"&gt;
&lt;assert applicPropertyIdent="attr"
applicPropertyType="prodattr"
applicPropertyValues="B"/&gt;
&lt;/applic&gt;
&lt;applic id="apC"&gt;
&lt;assert applicPropertyIdent="attr"
applicPropertyType="prodattr"
applicPropertyValues="C"/&gt;
&lt;/applic&gt;
&lt;/referencedApplicGroup&gt;
&lt;!-- ... --&gt;
&lt;para applicRefId="apA"&gt;Applies to A&lt;/para&gt;
&lt;para applicRefId="apB"&gt;Applies to B&lt;/para&gt;
&lt;para applicRefId="apC"&gt;Applies to C&lt;/para&gt;</verbatimText>
          </para>
          <para>filtering can be applied such that the instance will be applicable to both A and C, but not B. This is done by specifying a property multiple times in the applicability definition arguments. For example:</para>
          <para>
            <verbatimText verbatimStyle="vs23">$ s1kd-instance -A -Y "A or C" -s attr:prodattr=A -s attr:prodattr=C ...</verbatimText>
          </para>
          <para>This would produce the following in the instance:</para>
          <para>
            <verbatimText verbatimStyle="vs11">&lt;dmStatus&gt;
&lt;!-- ... --&gt;
&lt;applic&gt;
&lt;displayText&gt;
&lt;simplePara&gt;A or C&lt;/simplePara&gt;
&lt;/displayText&gt;
&lt;evaluate andOr="or"&gt;
&lt;assert applicPropertyIdent="attr"
applicPropertyType="prodattr"
applicPropertyValues="A"/&gt;
&lt;assert applicPropertyIdent="attr"
applicPropertyType="prodattr"
applicPropertyValues="C"/&gt;
&lt;/evaluate&gt;
&lt;/applic&gt;
&lt;!-- ... -&gt;
&lt;/dmStatus&gt;
&lt;!-- ... --&gt;
&lt;referencedApplicGroup&gt;
&lt;applic id="apA"&gt;
&lt;assert applicPropertyIdent="attr"
applicPropertyType="prodattr"
applicPropertyValues="A"/&gt;
&lt;/applic&gt;
&lt;applic id="apC"&gt;
&lt;assert applicPropertyIdent="attr"
applicPropertyType="prodattr"
applicPropertyValues="C"/&gt;
&lt;/applic&gt;
&lt;/referencedApplicGroup&gt;
&lt;!-- ... --&gt;
&lt;para applicRefId="apA"&gt;Applies to A&lt;/para&gt;
&lt;para applicRefId="apC"&gt;Applies to C&lt;/para&gt;</verbatimText>
          </para>
        </levelledPara>
        <levelledPara>
          <title>Resolving CIR dependencies with a custom XSLT script (-r)</title>
          <para>A CIR contains more information about an item than can be captured in a data module's reference to it. If this additional information is required, there are two methods to include it:</para>
          <para>
            <randomList>
              <listItem>
                <para>Distribute the CIR with the data module so the extra information can be linked to</para>
              </listItem>
              <listItem>
                <para>"Flatten" the information to fit in the data module's schema.</para>
              </listItem>
            </randomList>
          </para>
          <para>A custom XSLT script can be supplied with the -r option, which is then used to resolve the CIR dependencies of the last CIR specified with -R. For example:</para>
          <para>
            <verbatimText verbatimStyle="vs11">&lt;xsl:stylesheet
xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
version="1.0"&gt;
&lt;xsl:template match="functionalItemRef"&gt;
&lt;xsl:variable name="fin" select"@functionalItemNumber"/&gt;
&lt;xsl:variable name="spec" select="$cir//functionalItemSpec[
functionalItemIdent/@functionalItemNumber = $fin]"/&gt;
&lt;xsl:value-of select="$spec/name"/&gt;
&lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;</verbatimText>
          </para>
          <para>This script would resolve a <verbatimText verbatimStyle="vs12">functionalItemRef</verbatimText> by "flattening" it to the value of the <verbatimText verbatimStyle="vs12">name</verbatimText> element obtained from the CIR.</para>
          <para>The example CIR would contain a specification like:</para>
          <para>
            <verbatimText verbatimStyle="vs11">&lt;functionalItemSpec&gt;
&lt;functionalItemIdent functionalItemNumber="ABC"
functionalItemType="fit01"/&gt;
&lt;name&gt;Hydraulic pump&lt;/name&gt;
&lt;functionalItemAlts&gt;
&lt;functionalItem/&gt;
&lt;/functionalItemAlts&gt;
&lt;/functionalItemSpec&gt;</verbatimText>
          </para>
          <para>The source data module would contain a reference:</para>
          <para>
            <verbatimText verbatimStyle="vs11">&lt;para&gt;
The
&lt;functionalItemRef functionalItemNumber="ABC"/&gt;
is an item in the system.
&lt;/para&gt;</verbatimText>
          </para>
          <para>The command would resemble:</para>
          <para>
            <verbatimText verbatimStyle="vs24">$ s1kd-instance -R &lt;CIR&gt; -r &lt;custom XSLT&gt; &lt;src&gt;</verbatimText>
          </para>
          <para>And the resulting XML would be:</para>
          <para>
            <verbatimText verbatimStyle="vs11">&lt;para&gt;The Hydraulic pump is an item in the system.&lt;/para&gt;</verbatimText>
          </para>
          <para>The source data module and CIR are combined in to a single XML document which is used as the input to the XSLT script. The root element <verbatimText verbatimStyle="vs12">mux</verbatimText> contains two <verbatimText verbatimStyle="vs12">dmodule</verbatimText> elements. The first is the source data module, and the second is the CIR data module specified with the corresponding -R option. The CIR data module is first filtered on the defined applicability.</para>
          <para>An "identity" template is automatically inserted in to the custom XSLT script, equivalent to the following:</para>
          <para>
            <verbatimText verbatimStyle="vs11">&lt;xsl:template match="@*|node()"&gt;
&lt;xsl:copy&gt;
&lt;xsl:apply-templates select="@*|node()"/&gt;
&lt;/xsl:copy&gt;
&lt;/xsl:template&gt;</verbatimText>
          </para>
          <para>This means any elements or attributes which are not matched with a more specific template in the custom XSLT script are automatically copied.</para>
          <para>The set of built-in XSLT scripts used to resolve dependencies can be dumped using the -x option.</para>
        </levelledPara>
      </levelledPara>
      <levelledPara>
        <title>Examples</title>
        <para>Filtering a data module on specified applicability and writing to stdout:</para>
        <para>
          <verbatimText verbatimStyle="vs24">$ s1kd-instance -s version:prodattr=A &lt;DM&gt;</verbatimText>
        </para>
        <para>Filtering a data module on a specified product instance and writing to stdout:</para>
        <para>
          <verbatimText verbatimStyle="vs24">$ s1kd-instance -P &lt;PCT&gt; -p versionA &lt;DM&gt;</verbatimText>
        </para>
        <para>Filtering a data module on specified skill levels and writing to stdout:</para>
        <para>
          <verbatimText verbatimStyle="vs24">$ s1kd-instance -k sk01/sk02 &lt;DMs&gt;</verbatimText>
        </para>
        <para>Filtering data modules for a particular customer and outputting with extended identification:</para>
        <para>
          <verbatimText verbatimStyle="vs24">$ s1kd-instance -s version:prodattr=A -e 12345-54321 -O . &lt;DMs&gt;</verbatimText>
        </para>
        <para>Writing out a data module from stdin to a directory with automatic naming:</para>
        <para>
          <verbatimText verbatimStyle="vs24">$ s1kd-transform -s &lt;xsl&gt; &lt;DM&gt; | s1kd-instance -O &lt;dir&gt;</verbatimText>
        </para>
      </levelledPara>
    </description>
  </content>
</dmodule>
